// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id         Int               @id @default(autoincrement())
  firstName  String            @db.VarChar(50)
  lastName   String            @db.VarChar(50)
  profession String            @db.VarChar(50)
  bio        String            @db.Text
  avatar     String            @db.VarChar(300)
  email      String            @unique @db.VarChar(100)
  phone      String            @db.VarChar(20)
  address    String            @db.Text
  password   String            @db.VarChar(500)
  otp        String            @db.VarChar(10)
  type       String            @db.VarChar(20)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  categories blog_catagories[]
  blogs      blogs[]

  product_carts product_carts[]
  web_reviews   web_reviews[]
}

model teams {
  id            Int      @id @default(autoincrement())
  firstName     String   @db.VarChar(50)
  lastName      String   @db.VarChar(25)
  profession    String   @db.VarChar(50)
  bio           String   @db.Text
  avatar        String   @db.VarChar(300)
  email         String   @unique @db.VarChar(50)
  phone         String   @db.VarChar(20)
  qualification String   @db.Text
  designation   String   @db.VarChar(50)
  details       String   @db.Text
  facebook      String   @db.TinyText
  twiter        String   @db.TinyText
  linkedin      String   @db.TinyText
  status        String   @db.VarChar(25)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model notices {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(500)
  details   String   @db.Text
  status    String   @db.VarChar(15)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model massages {
  id        Int      @id @default(autoincrement())
  firstName String   @db.VarChar(100)
  lastName  String   @db.VarChar(100)
  phone     String   @db.VarChar(20)
  email     String   @db.VarChar(50)
  subject   String   @db.TinyText
  details   String   @db.Text
  status    String   @db.VarChar(15)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model appointments {
  id         Int      @id @default(autoincrement())
  fullName   String   @db.VarChar(100)
  phone      String   @db.VarChar(20)
  diagnosis  String   @db.TinyText
  consultant String   @db.TinyText
  date       String   @db.MediumText
  status     String   @db.VarChar(15)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model web_reviews {
  id         Int      @id @default(autoincrement())
  fullName   String   @db.VarChar(100)
  img        String   @db.TinyText
  details    String   @db.Text
  profession String   @db.TinyText
  starts     String   @db.VarChar(5)
  status     String   @db.VarChar(15)
  usersId    Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  users users @relation(fields: [usersId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model jobs {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(50)
  shortDesc String   @db.VarChar(50)
  details   String   @db.Text
  status    String   @db.VarChar(15)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model subscribers {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(50)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model services {
  id          Int      @id @default(autoincrement())
  title       String   @unique @db.VarChar(100)
  subTitle    String   @db.VarChar(200)
  shortDesc   String   @db.MediumText
  featuredImg String   @db.TinyText
  fullImg     String   @db.TinyText
  details     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model blog_catagories {
  id        Int      @id @default(autoincrement())
  title     String   @unique @db.VarChar(100)
  desc      String   @db.MediumText
  usersId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [usersId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  blogs     blogs[]
}

model blogs {
  id              Int             @id @default(autoincrement())
  title           String          @unique @db.VarChar(200)
  shortDesc       String          @db.MediumText
  featuredImg     String          @db.TinyText
  fullImg         String          @db.TinyText
  details         String          @db.Text
  blogCatsId      Int
  usersId         Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  users           users           @relation(fields: [usersId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  blog_catagories blog_catagories @relation(fields: [blogCatsId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

// Product Models
model brands {
  id        Int        @id @default(autoincrement())
  brandName String     @unique @db.VarChar(50)
  brandImg  String     @db.VarChar(300)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  products[]
}

model product_catagories {
  id           Int        @id @default(autoincrement())
  categoryName String     @unique @db.VarChar(50)
  categoryImg  String     @db.VarChar(300)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  products     products[]
}

model products {
  id             Int             @id @default(autoincrement())
  title          String          @db.VarChar(200)
  short_des      String          @db.VarChar(500)
  price          Float
  discount       Boolean
  discount_price Float
  image          String          @db.VarChar(200)
  stock          Boolean
  star           Float
  remark         products_remark
  productCat_id  Int
  brand_id       Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  product_carts      product_carts[]
  product_details    product_details?
  brands             brands             @relation(fields: [brand_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  product_catagories product_catagories @relation(fields: [productCat_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_details {
  id         Int      @id @default(autoincrement())
  img1       String   @db.VarChar(200)
  img2       String   @db.VarChar(200)
  img3       String   @db.VarChar(200)
  des        String   @db.LongText
  color      String   @db.VarChar(200)
  size       String   @db.VarChar(200)
  product_id Int      @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  products   products @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model product_carts {
  id         Int         @id @default(autoincrement())
  color      String      @db.VarChar(100)
  size       String      @db.VarChar(200)
  qty        Float
  user_id    Int
  product_id Int
  status     cart_status
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  users      users       @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  products   products    @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

enum products_remark {
  Popular
  Regular
  Special
  New
}

enum cart_status {
  pending
  ordered
  approved
  delivered
  cancel
}
